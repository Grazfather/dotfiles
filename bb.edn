{:tasks
 {:requires ([babashka.fs :as fs])
  :init (do
          (def files
            [["doom.d"]
             ["vim"]
             ["vimrc"]
             ["bash_aliases"]
             ["gitaliases"]
             ["githelpers"]
             ["gitignore_global"]
             ["tmux.conf"]
             ["spacehammer"]
             ["karabiner.json" ".config/karabiner/karabiner.json"]
             ["nvim/" ".config/nvim/"]])

          (def base-path (System/getProperty "user.dir"))

          (defn status [& args]
            (apply println "[*]" args))
          (defn file-contains? [filename re]
            (try
              (let [contents (slurp filename)
                    contains (re-find (re-pattern re) contents)]
                contains)
              (catch java.io.FileNotFoundException e false)))

          (defn append-to-file [filename s]
            (try (fs/create-file filename)
                 (catch java.nio.file.FileAlreadyExistsException e))
            (spit filename (str s "\n") :append true))

          (defn symlink-and-backup [src dst]
            (when (fs/exists? dst {:nofollow-links true})
              (let [backup (str dst ".bak")]
                (status "Backing up" dst "to" backup)
                (fs/delete-tree backup)
                (fs/copy-tree dst backup {:nofollow-links true})))
            (status "Symlinking" src "to" dst)
            (fs/create-dirs (fs/parent dst))
            (fs/delete-tree dst)
            (fs/create-sym-link dst src))

          (defn home-dir [path]
            (-> (System/getenv "HOME") (fs/path path) str)))

  symlink (doseq [[src dst] files
                  :let [dstname (or dst (str "." src))
                        dst (home-dir dstname)
                        absrc (str (fs/absolutize src))]]
            (symlink-and-backup absrc dst))

  set-path (let [filename (home-dir ".bashrc")]
             (if-not (file-contains? filename (str (fs/path base-path "bin")))
               (append-to-file filename
                               (str "\n# Add dotfiles bin to PATH\n" "export PATH=$PATH:" base-path "/bin"))
               (status "dotfiles bin already in .bashrc")))

  install-bash-aliases (let [filename (home-dir ".bashrc")]
                         (if-not (file-contains? filename ".bash_aliases")
                           (append-to-file filename
                                           (str
                                             "\n[ -f $HOME/.bash_aliases ] && source $HOME/.bash_aliases"
                                             "\n[ -f $HOME/.bash_aliases_local ] && source $HOME/.bash_aliases_local"))
                           (status ".bash_aliases already in .bashrc")))

  install-git-aliases (let [filename (home-dir ".gitconfig")]
                        (if-not (file-contains? filename ".gitaliases")
                          (append-to-file filename
                                          "[include]\n\tpath = ~/.gitaliases")
                          (status ".gitaliases already in .bashrc")))

  install-vim-plugins {:task (shell "vim +'PlugInstall --sync' +qa")
                       :depends [symlink]}

  setup {:depends [symlink set-path install-bash-aliases install-git-aliases install-vim-plugins]}}}
