{:tasks
 {:requires ([babashka.fs :as fs])
  :init (do
          (def files
            [["vim"]
             ["vimrc"]
             ["bash_aliases"]
             ["gitaliases"]
             ["githelpers"]
             ["gitignore_global"]
             ["tmux.conf"]
             ["spacehammer"]
             ["kitty.conf" ".config/kitty/kitty.conf"]
             ["karabiner" ".config/karabiner/"]
             ["starship.toml" ".config/starship.toml"]
             ["nvim/" ".config/nvim/"]
             ["vscodesettings.json",
              "Library/Application Support/Code/User/settings.json"]])

          (def base-path (System/getProperty "user.dir"))

          (defn status [& args]
            (apply println "[*]" args))

          (defn file-contains? [filename re]
            (try
              (let [contents (slurp filename)
                    contains (re-find (re-pattern re) contents)]
                contains)
              (catch java.io.FileNotFoundException e false)))

          (defn append-to-file [filename s]
            (try (fs/create-file filename)
                 (catch java.nio.file.FileAlreadyExistsException e))
            (spit filename (str s "\n") :append true))

          (defn append-if-missing [filename s compare-string]
            (if-not (file-contains? filename compare-string)
              (append-to-file filename s)
              (status (str compare-string " already in " filename))))

          (defn symlink-and-backup [src dst]
            (when (fs/exists? dst {:nofollow-links true})
              (let [backup (str dst ".bak")]
                (status "Backing up" dst "to" backup)
                (fs/delete-tree backup)
                (fs/copy-tree dst backup {:nofollow-links true})))
            (status "Symlinking" src "to" dst)
            (fs/create-dirs (fs/parent dst))
            (fs/delete-tree dst)
            (fs/create-sym-link dst src))

          (defn home-dir [path]
            (-> (System/getenv "HOME") (fs/path path) str)))

  symlink (doseq [[src dst] files
                  :let [dstname (or dst (str "." src))
                        dst (home-dir dstname)
                        absrc (str (fs/absolutize src))]]
            (symlink-and-backup absrc dst))

  set-path (let [filename (home-dir ".bashrc")]
             (append-if-missing filename
                                (str "\n# Add dotfiles bin to PATH\n" "export PATH=$PATH:" base-path "/bin")
                                (str (fs/path base-path "bin"))))

  install-bash-aliases (let [filename (home-dir ".bashrc")]
                         (append-if-missing filename
                                            "\n[ -f $HOME/.bash_aliases ] && source $HOME/.bash_aliases"
                                            ".bash_aliases")
                         (append-if-missing filename
                                            "\n[ -f $HOME/.bash_aliases_local ] && source $HOME/.bash_aliases_local"
                                            ".bash_aliases_local"))

  install-git-aliases (let [filename (home-dir ".gitconfig")]
                        (append-if-missing filename "[include]\n\tpath = ~/.gitaliases" ".gitaliases"))

  install-git-ignore (let [filename (home-dir ".gitconfig")]
                        (append-if-missing filename "[core]\n\texcludesfile = ~/.gitignore_global" ".gitignore_global"))

  install-vim-plugins {:task (do
                               ; Plugins may be vim or neovim specific, so we
                               ; have to install using both
                               (shell "vim +'PlugInstall --sync' +qa")
                               (shell "nvim +qa"))
                       :depends [symlink]}

  setup {:depends [symlink set-path install-bash-aliases install-git-aliases
                   install-git-ignore install-vim-plugins]}}}
