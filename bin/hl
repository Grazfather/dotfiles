#!/usr/bin/env bb
#_" -*- mode: clojure; -*-"
(ns hl
  (:require [clojure.java.io :as io]
            [clojure.string :as s]
            [clojure.tools.cli :refer [parse-opts]]))

;; CLI
(def cli-options
  [["-h" "--help" "Show help"]
   ["-p" "--pattern PATTERN" "Regex pattern to highlight"
    :default "^.+$"
    :validate [#(re-pattern %) "Must be a valid regex pattern"]
    ]
   ["-a" "--alphanumeric" "Highlight alphanumeric words"]
   ["-d" "--digits" "Highlight decimal digits"]
   ["-w" "--words" "Highlight (regex) words"]
   ["-x" "--hexnumbers" "Highlight hex numbers"]])

(def usage-header
  "USAGE:
    hl [-h]
    hl [-p PATTERN]
    hl [-a,-d,-w,-x]")

(def usage-details
  "
    -p, --pattern <PATTERN>
            Match against specified regex pattern.

            If pattern contains groups, they must not be overlapping, and every matched
            character must be in some group, otherwise they will not be shown")

(defn print-usage
  [o]
  (println usage-header)
  (println "\nARGS:")
  (println (:summary o))
  (println usage-details)
)

;; Colorization
(def ansi-escape "\u001b")

(defn ansi-color-start
  [color]
  (format "%s[38;5;%dm" ansi-escape color))

(defn ansi-color-end
  []
  (format "%s[0m" ansi-escape))

(defn get-color
  [s]
  (-> s
      hash
      (mod 200) ; TODO: Fix
      (+ 16)))

(defn colorize
  [s]
  (format "%s%s%s"
          (ansi-color-start (get-color s))
          s
          (ansi-color-end)))

;; Pattern matching
(defn colorize-match
  [match]
  (if (vector? match) ; groups
    (s/join "" (mapv colorize (rest match)))
    (colorize match)))

(defn colorize-line
  [regex l]
  (s/replace l regex colorize-match))

;; Main
(defn run [pattern lines]
  (doseq [l lines]
    (println (colorize-line pattern l))))

;; Arg parsing
(def o (parse-opts *command-line-args* cli-options))
(def opts (:options o))

(when-let [e (:errors o)]
  (mapv #(println %) e)
  (System/exit 1))
(when (:help opts)
  (print-usage o)
  (System/exit 1))

(def pattern (re-pattern (cond
                           (:alphanumeric opts) "[a-zA-Z\\d]+"
                           (:decimalnumbers opts) "\\d+"
                           (:words opts) "\\w+"
                           (:hexnumbers opts) "(?:0x)?[a-fA-F\\d]{2,}"
                           (:pattern opts) (:pattern opts))))
(def stream (line-seq (io/reader *in*)))

(run pattern stream)
